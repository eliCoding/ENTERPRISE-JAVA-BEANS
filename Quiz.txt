EJB PRACTICAL QUIZ - 2017/06/06
===============================

Create an enterprise app called "Quiz" which will create 3 projects, including -ejb and -war.
Create a Java library only project called Quiz-interface.
Create Java GUI project called Quiz-GUI.


Quiz-interface
--------------

In Quiz-interface project create a class 'Travel' in package 'quiz.entities' with the following private fields:

int id;
String fullName, destination;
Date departDate, returnDate;

Add a constructor which takes 4 parameters (fullName, destination, departDate, returnDate).
The id numbers will be consecutive Fibonacci numbers starting from 2 (then 3, 5, 8, 13, 21, and so on) generated by the constructor.
Constructor must use setters to set values of fields, except for id.

Using Netbeans autogenerate public getters and setters for all the fields, except 'id' which only has a getter and no setter.
Modify methods setFullName() and setDestination() so that if parameter is an empty string "" it throws "IllegalArgumentException" with message explaining "Value must not be emtpy".

Make sure the entity Travel implements Serializable interface, has a serial number and a public default constructor.

Quiz-ejb
--------

In Quiz-ejb create a Singleton bean called "TravelDataEJB" in package 'quiz.ejb' and place its Remote interface in Quiz-interface project.

Add a field to the bean:

private ArrayList<Travel> travelList;

Add method initialize() with annotation @PostConstruct that will assign a new empty ArrayList to the above field at bean's creation time.

In Quiz-interface (not -ejb!!!) add signatures of the following public methods:

public Travel[] getAllTravels();
public void addTravel(Travel item);
public String[] whoIsTravellingOnDate(Date date);

Then implement them in -ejb in TravelDataEJB class.
Make sure *ALL* methods use System.out.println("") to log that they were executed.

Also add readers/writers locks appropriately.

Method getAllTravels() and addTravel() are self-explanatory and work just like in all previous examples we did in class.

Method whoIsTravellingOnDate(Date date) will return an array of fullNames of all persons who are on vacation on that particular date.

Quiz-war
--------

The web interface will handle the following urls:
/list mapped to TravelListServlet class. <a href="list">
/add mapped to AddTravelServlet class. <a href="add">
/whois mapped to WhoIsTravellingServlet class. <a href="whois">

Create both servlets with above names and mappings in 'quiz.servlets' package.

In Quiz-war/Libraries add Quiz-interface as a dependency to gain access to *Remote interfaces to access the bean.

TravelListServlet will make a call to the bean, retrieve all Travel items and display them in a HTML table (!).
AddTravelServlet will act as a 2-state form and will, on POST submission, call bean to add new Travel to the list.
WhoIsTravellingServlet will act a a 2-state form with one submission field 'date'. On submission it will use method is whoIsTravellingOnDate() to retrieve a list of persons who a traveling and will display that list back to the user.

Quiz-GUI
--------

Create MainWindow as JFrame.

Add interface where in one window user may see a list of Travel items and add a new Travel item, like we did so many times before in class.
Also add an input field with a date and search button to find all persons traveling on that date.
When button is pressed you will make a call to bean's WhoIsTravellingServlet() method and show the result in a simple dialog window, when names are comma-separated. Example text of a message box:

"On 2017-01-01" travelling are: Jerry Doe, Marry Moe, Mimi Toe.

Implement the functionality using calls to the bean.
